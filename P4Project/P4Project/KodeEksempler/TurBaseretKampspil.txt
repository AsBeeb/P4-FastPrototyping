struct Map {
	local Colomn[] X;
}

struct Colomn {
	local string[] Y;
}

struct Monster{
	local int Health;
	local int Damage;
	local string Name;
	local int X = 0;
	local int Y = 0;
	Monster(int health, int damage, string name, int x, int y){
		Health = health;
		Damage = damage;
		Name = name;
		X = x;
		Y = y;
	}
}

struct BossMonster{
	local int Health;
	local int Damage;
	local string Name;
	local Item[] Inventory;
	local int X = 0;
	local int Y = 0;

	BossMonster(int health, int damage, string name, Item[] items, int x, int y){
		Health = health;
		Damage = damage;
		Name = name;
		Inventory = items;
		X = x;
		Y = y;
	}
}


struct BattleStruct{
	local BossMonster BM;
	local Monster M;
	local Character C;
}

struct Character{
	local int Health;
	local int Damage;
	local string Name;
	local Item[] Inventory;
	local int X = 5;
	local int Y = 2;
	local int CritChance = 20;
	Character(int health, int damage, string name, Item[] items){
		Health = health;
		Damage = damage;
		Name = name;
		Inventory = items;
	}
}

struct Item{
	local string Name;
	local int Power;
	local string Type;
	Item(string name, int power, string type){		
		Name = name;
		Power = power;
		Type = type;
	}
}

global Map globalMap;
global Monster globalGoblin1;
global Monster globalGoblin2;
global Monster globalGoblin3;

global BossMonster globalOgre;


func void main(){
	# Generate monsters
	local Monster Goblin1 = Monster(100, 20, "Goblin", 3, 1);
	local Monster Goblin2 = Monster(100, 20, "Goblin", 3, 2);
	local Monster Goblin3 = Monster(100, 20, "Goblin", 3, 3);
	
	globalGoblin1 =	Goblin1;
	globalGoblin2 =	Goblin2;
	globalGoblin3 =	Goblin3;

	#Generate boss items
	local Item BossHealingPotion1 = Item("HealingPotion", 60, "Healing");
	local Item BossHealingPotion2 = Item("HealingPotion", 60, "Healing");
	local Item BossHealingPotion3 = Item("ManaPotion", 60, "Mana");

	local Item[] BossItems;
	ListAdd(BossItems, BossHealingPotion1);
	ListAdd(BossItems, BossHealingPotion2);
	ListAdd(BossItems, BossHealingPotion3);
	
	#Generate boss
	local BossMonster Ogre = BossMonster(300, 45, "Ogre", BossItems, 1, 2);

	globalOgre = Ogre;

	#Generate player items
	local Item PlayerHealingPotion1 = Item("HealingPotion", 60, "Healing");
	local Item PlayerHealingPotion2 = Item("HealingPotion", 60, "Healing");
	local Item PlayerHealingPotion3 = Item("ManaPotion", 60, "Mana");

	local Item[] PlayerItems;
	ListAdd(PlayerItems, PlayerHealingPotion1);
	ListAdd(PlayerItems, PlayerHealingPotion2);
	ListAdd(PlayerItems, PlayerHealingPotion3);
	
	
	#Generate player
	Print("Insert the Champions name: ");
	local string PlayerName = GetString();
	local Character Player = Character(200, 20, PlayerName, PlayerItems);

	GenerateMap();

	#while(Player.Health > 0 && Ogre.Health > 0){
	local int i = 0;
	while (i < 5){
		MovePlayer(Player);
	}

	#}
}

func void MovePlayer(Character player){
	local int Direction = ChooseOption(true, "Move up", "Move left", "Move right", "Move down");
	Print("\n\n\n\n\n\n\n\n\n\n");
	if (Direction == 1){
		if (globalMap.X[player.X-1].Y[player.Y] == ("█")){
			Print("You can't walk into walls \n");
		}
		else{
			globalMap.X[player.X-1].Y[player.Y] = "P";
			globalMap.X[player.X].Y[player.Y] = " ";
			player.X = player.X - 1;
			CheckAndBeginBattle(player);
		}
	}
	elif (Direction == 2){
		if (globalMap.X[player.X].Y[player.Y-1] == ("█")){
				Print("You can't walk into walls \n");
		}
		else{
			globalMap.X[player.X].Y[player.Y-1] = "P";
			globalMap.X[player.X].Y[player.Y] = " ";
			player.Y = player.Y - 1;
			CheckAndBeginBattle(player);
		}
	}
	elif (Direction == 3){
		if (globalMap.X[player.X].Y[player.Y+1] == ("█")){
			Print("You can't walk into walls \n");
		}
		else{
			globalMap.X[player.X].Y[player.Y+1] = "P";
			globalMap.X[player.X].Y[player.Y] = " ";
			player.Y = player.Y + 1;
			CheckAndBeginBattle(player);
		}
	}
	else{
		if (globalMap.X[player.X+1].Y[player.Y] == ("█")){
			Print("You can't walk into walls \n");
		}
		else{
			globalMap.X[player.X+1].Y[player.Y] = "P";
			globalMap.X[player.X].Y[player.Y] = " ";
			player.X = player.X + 1;
			 CheckAndBeginBattle(player);
		}
	}
	PrintMap(globalMap);

}

func void CheckAndBeginBattle(Character Player){
	if (Player.X == globalGoblin1.X && Player.Y == globalGoblin1.Y){
		BeginCombat(Player, globalGoblin1);
	}
	elif(Player.X == globalGoblin2.X && Player.Y == globalGoblin2.Y){
		BeginCombat(Player, globalGoblin2);
	}
	elif(Player.X == globalGoblin3.X && Player.Y == globalGoblin3.Y){
		BeginCombat(Player, globalGoblin3);
	}
	elif(Player.X == globalOgre.X && Player.Y == globalOgre.Y){
		BeginBossBattle();
	}
}

func void GenerateMap(){
	local Map map;
	local Colomn col1;
	local Colomn col2;
	local Colomn col3;
	local Colomn col4;
	local Colomn col5;
	local Colomn col6;
	local Colomn col7;

	ListAdd(map.X, col1);
	ListAdd(map.X, col2);
	ListAdd(map.X, col3);
	ListAdd(map.X, col4);
	ListAdd(map.X, col5);
	ListAdd(map.X, col6);
	ListAdd(map.X, col7);

	local int i = 0;
	local int j = 0;
	while (i < ListLength(map.X)){
		while (j < 5){
			ListAdd(map.X[i].Y, "█");
			j = j + 1;
		}
		j = 0;
		i = i + 1;
	}

	col2.Y[1] = " ";
	col2.Y[2] = "O";
	col2.Y[3] = " ";

	col3.Y[1] = " ";
	col3.Y[2] = " ";
	col3.Y[3] = " ";

	col4.Y[1] = "G";
	col4.Y[2] = "G";
	col4.Y[3] = "G";

	col5.Y[1] = " ";
	col5.Y[2] = " ";
	col5.Y[3] = " ";

	col6.Y[1] = " ";
	col6.Y[2] = "P";
	col6.Y[3] = " ";


	PrintMap(map);
	globalMap = map;
}

func void PrintMap(Map map){
	local int RowSize = ListLength(map.X);
	local int ColomnSize = ListLength(map.X[0].Y);
	local int i;
	local int j;
	while (i < RowSize){
		while(j < ColomnSize){
			Print(map.X[i].Y[j] );
			j = j + 1;
		}
		Print("\n");
		j = 0;
		i = i + 1;
	}
}

func void BeginCombat(Character player, Monster goblin){
	Print("\n\n\n\n\n\n\n\n\n\n");
	Print("Battle between " : player.Name : " against " : goblin.Name : "\n");
	local BattleStruct PlayerCharacter;
	local BattleStruct GoblinCharacter;

	PlayerCharacter.C = player;
	GoblinCharacter.M = goblin;

	local BattleStruct[] Battle;
	ListAdd(Battle, PlayerCharacter);
	ListAdd(Battle, GoblinCharacter);
	

	local string playerHealthBar = "";
	local string goblinHealthBar = "";
	local int i = 0 ;
	
	

	play (attacker vs defender in Battle){
		
		#update player and goblin health
		while (i < goblin.Health / 10){
			goblinHealthBar = goblinHealthBar : "█";
			i = i + 1;
		}
		i = 0;
		while (i < player.Health / 10){
			playerHealthBar = playerHealthBar : "█";
			i = i + 1;
		}
		i = 0;
		
		#print healthbars
		Print(player.Name : "s health: \n" : playerHealthBar : "\n");
		Print("Goblins health: \n" : goblinHealthBar : "\n");
		#print the goblin
		PrintGoblin();
	
	
	
		if (attacker.M.Name == goblin.Name){
			# Goblins turn
		}
		elif (attacker.C.Name == player.Name){
			PlayerTurn(player, defender[0]);
		}
		else {
		}
		goblinHealthBar = "";
		playerHealthBar = "";
		Print("\n\n\n\n\n\n\n\n\n\n");

	} until (goblin.Health <= 0 || player.Health <= 0)
	Print("The goblin died \n");

}

func void PlayerTurn(Character player, BattleStruct monster){
	local int choice = ChooseOption(true, "Attack", "Use skill", "Use item");

	if (choice == 1){
		local bool isCritical = (GetRandomInt(1, 100) < player.CritChance);
		if (monster.BM.Name != ("")){
			monster.BM.Health = monster.BM.Health - player.Damage;
			if (isCritical){
				monster.BM.Health = monster.BM.Health - player.Damage;
			}
		}
		elif (monster.M.Name != ("")){
			monster.M.Health = monster.M.Health - player.Damage;
			if (isCritical){
				monster.M.Health = monster.M.Health - player.Damage;
			}
		}
	}
	elif(choice == 2){
		Print("Skills not added yet \n");
	}
	elif(choice == 3){
		Print("Item use not added yet \n");
	}
}

func void PrintGoblin(){
	Print("     _▄▄▄_\n ╚╬╝ (o.o) \n  ╠==(_┼_)\n  ║  /   \\ \n");
}

func void BeginBossBattle() {
	Print("BossBattle!!\n");
}